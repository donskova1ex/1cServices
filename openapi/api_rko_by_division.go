// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample some endpoints for 1C
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"
)

// RkoByDivisionAPIController binds http requests to an api service and writes the service results to the http response
type RkoByDivisionAPIController struct {
	service      RkoByDivisionAPIServicer
	errorHandler ErrorHandler
}

// RkoByDivisionAPIOption for how the controller is set up.
type RkoByDivisionAPIOption func(*RkoByDivisionAPIController)

// WithRkoByDivisionAPIErrorHandler inject ErrorHandler into controller
func WithRkoByDivisionAPIErrorHandler(h ErrorHandler) RkoByDivisionAPIOption {
	return func(c *RkoByDivisionAPIController) {
		c.errorHandler = h
	}
}

// NewRkoByDivisionAPIController creates a default api controller
func NewRkoByDivisionAPIController(s RkoByDivisionAPIServicer, opts ...RkoByDivisionAPIOption) *RkoByDivisionAPIController {
	controller := &RkoByDivisionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RkoByDivisionAPIController
func (c *RkoByDivisionAPIController) Routes() Routes {
	return Routes{
		"RkoByDivision": Route{
			strings.ToUpper("Get"),
			"/1c_api/v1/rkobydivision",
			c.RkoByDivision,
		},
	}
}

// RkoByDivision - Division issue for the period
func (c *RkoByDivisionAPIController) RkoByDivision(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var fromParam string
	if query.Has("from") {
		param := query.Get("from")

		fromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "from"}, nil)
		return
	}
	var toParam string
	if query.Has("to") {
		param := query.Get("to")

		toParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "to"}, nil)
		return
	}
	result, err := c.service.RkoByDivision(r.Context(), fromParam, toParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
