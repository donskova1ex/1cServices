// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample some endpoints for 1C
 *
 * API version: 1.0.0
 */

package openapi

import (
	"context"
	"fmt"
	"github.com/donskova1ex/1cServices/internal/domain"
	"log/slog"
	"net/http"
)

type DivisionRkoProcessor interface {
	DivisionRko(ctx context.Context, from string, to string) ([]*domain.DivisionRko, error)
}

// RkoByDivisionAPIService is a service that implements the logic for the RkoByDivisionAPIServicer
// This service should implement the business logic for every endpoint for the RkoByDivisionAPI API.
// Include any external packages or services that will be required by this service.
type RkoByDivisionAPIService struct {
	divisionRkoProcessor DivisionRkoProcessor
	log                  *slog.Logger
}

// NewRkoByDivisionAPIService creates a default api service
func NewRkoByDivisionAPIService(divisionRkoProcessor DivisionRkoProcessor, log *slog.Logger) *RkoByDivisionAPIService {
	return &RkoByDivisionAPIService{
		divisionRkoProcessor: divisionRkoProcessor,
		log:                  log,
	}
}

// RkoByDivision - Division issue for the period
func (s *RkoByDivisionAPIService) RkoByDivision(ctx context.Context, from string, to string) (ImplResponse, error) {
	if from == "" {
		return Response(http.StatusNotFound, nil), fmt.Errorf("from is required")
	}
	if to == "" {
		return Response(http.StatusNotFound, nil), fmt.Errorf("to is required")
	}
	rkoSlice, err := s.divisionRkoProcessor.DivisionRko(ctx, from, to)
	if err != nil {
		return Response(http.StatusBadRequest, nil), err
	}

	openApiRko := domainRkoToOpenApi(rkoSlice)
	if len(openApiRko) == 0 {
		return Response(http.StatusNoContent, nil), nil
	}

	return Response(http.StatusOK, openApiRko), nil
}

func domainRkoToOpenApi(domainRko []*domain.DivisionRko) []Rkobydivision {
	result := make([]Rkobydivision, 0, len(domainRko))
	for _, rko := range domainRko {
		result = append(result, Rkobydivision{
			DivisionId: rko.DivisionId,
			Result:     rko.Result,
			Quantity:   rko.Quantity,
		})
	}
	return result
}
