// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger user management service - OpenAPI 3.0
 *
 * This is a sample some endpoints for 1C
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PDNcalculationAPIController binds http requests to an api service and writes the service results to the http response
type PDNcalculationAPIController struct {
	service      PDNcalculationAPIServicer
	errorHandler ErrorHandler
}

// PDNcalculationAPIOption for how the controller is set up.
type PDNcalculationAPIOption func(*PDNcalculationAPIController)

// WithPDNcalculationAPIErrorHandler inject ErrorHandler into controller
func WithPDNcalculationAPIErrorHandler(h ErrorHandler) PDNcalculationAPIOption {
	return func(c *PDNcalculationAPIController) {
		c.errorHandler = h
	}
}

// NewPDNcalculationAPIController creates a default api controller
func NewPDNcalculationAPIController(s PDNcalculationAPIServicer, opts ...PDNcalculationAPIOption) *PDNcalculationAPIController {
	controller := &PDNcalculationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PDNcalculationAPIController
func (c *PDNcalculationAPIController) Routes() Routes {
	return Routes{
		"GetParametresByLoanId": Route{
			strings.ToUpper("Get"),
			"/api/v1/pdncalculation/{loanid}",
			c.GetParametresByLoanId,
		},
	}
}

// GetParametresByLoanId - Find parametres by loan id
func (c *PDNcalculationAPIController) GetParametresByLoanId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	loanidParam := params["loanid"]
	if loanidParam == "" {
		c.errorHandler(w, r, &RequiredError{"loanid"}, nil)
		return
	}
	result, err := c.service.GetParametresByLoanId(r.Context(), loanidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
